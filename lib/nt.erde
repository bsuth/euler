local min = math.min
local { pAdicReduction } = require('lib.primes')

module function gcd(...divisors) {
  local n = #divisors

  if n == 0 {
    return 0
  }

  local u = divisors[1]

  for i = 2, n {
    local v = divisors[i]

    u = do {
      -- Binary gcd: https://en.wikipedia.org/wiki/Binary_GCD_algorithm
      if u == 0 {
        return v
      } elseif v == 0 {
        return u
      }

      local u, i = pAdicReduction(2, u)
      local v, j = pAdicReduction(2, v)
      local k = min(i, j)

      while true {
        if u > v {
          local tmp = v
          v = u
          u = tmp
        } elseif u == v {
          return u << k
        }

        v = pAdicReduction(2, v - u)
      }
    }
  }

  return u
}

module function lcm(...divisors) {
  local n = #divisors

  if n == 0 {
    return 0
  }

  local result = 1
  for _, divisor in pairs(divisors) {
    result *= divisor
  }

  return result / gcd(...divisors)
}
